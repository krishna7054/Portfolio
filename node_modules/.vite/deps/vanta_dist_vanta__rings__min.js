import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/vanta/dist/vanta.rings.min.js
var require_vanta_rings_min = __commonJS({
  "node_modules/vanta/dist/vanta.rings.min.js"(exports, module) {
    !function(t, e) {
      "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports._vantaEffect = e() : t._vantaEffect = e();
    }("undefined" != typeof self ? self : exports, () => (() => {
      "use strict";
      var t = { d: (e2, i2) => {
        for (var s2 in i2) t.o(i2, s2) && !t.o(e2, s2) && Object.defineProperty(e2, s2, { enumerable: true, get: i2[s2] });
      }, o: (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), r: (t2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
      } }, e = {};
      function i() {
        return "undefined" != typeof navigator ? /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth < 600 : null;
      }
      t.r(e), t.d(e, { default: () => m }), Number.prototype.clamp = function(t2, e2) {
        return Math.min(Math.max(this, t2), e2);
      };
      const s = (t2) => t2[Math.floor(Math.random() * t2.length)];
      function o(t2, e2) {
        return null == t2 && (t2 = 0), null == e2 && (e2 = 1), t2 + Math.random() * (e2 - t2);
      }
      function n(t2, e2) {
        return null == t2 && (t2 = 0), null == e2 && (e2 = 1), Math.floor(t2 + Math.random() * (e2 - t2 + 1));
      }
      function r(t2) {
        for (; t2.children && t2.children.length > 0; ) r(t2.children[0]), t2.remove(t2.children[0]);
        t2.geometry && t2.geometry.dispose(), t2.material && (Object.keys(t2.material).forEach((e2) => {
          t2.material[e2] && null !== t2.material[e2] && "function" == typeof t2.material[e2].dispose && t2.material[e2].dispose();
        }), t2.material.dispose());
      }
      const h = "object" == typeof window;
      let a = h && window.THREE || {};
      h && !window.VANTA && (window.VANTA = {});
      const l = h && window.VANTA || {};
      l.register = (t2, e2) => l[t2] = (t3) => new e2(t3), l.version = "0.5.24";
      const c = function() {
        return Array.prototype.unshift.call(arguments, "[VANTA]"), console.error.apply(this, arguments);
      };
      l.VantaBase = class {
        constructor(t2 = {}) {
          if (!h) return false;
          l.current = this, this.windowMouseMoveWrapper = this.windowMouseMoveWrapper.bind(this), this.windowTouchWrapper = this.windowTouchWrapper.bind(this), this.windowGyroWrapper = this.windowGyroWrapper.bind(this), this.resize = this.resize.bind(this), this.animationLoop = this.animationLoop.bind(this), this.restart = this.restart.bind(this);
          const e2 = "function" == typeof this.getDefaultOptions ? this.getDefaultOptions() : this.defaultOptions;
          if (this.options = Object.assign({ mouseControls: true, touchControls: true, gyroControls: false, minHeight: 200, minWidth: 200, scale: 1, scaleMobile: 1 }, e2), (t2 instanceof HTMLElement || "string" == typeof t2) && (t2 = { el: t2 }), Object.assign(this.options, t2), this.options.THREE && (a = this.options.THREE), this.el = this.options.el, null == this.el) c('Instance needs "el" param!');
          else if (!(this.options.el instanceof HTMLElement)) {
            const t3 = this.el;
            if (this.el = (i2 = t3, document.querySelector(i2)), !this.el) return void c("Cannot find element", t3);
          }
          var i2, s2;
          this.prepareEl(), this.initThree(), this.setSize();
          try {
            this.init();
          } catch (t3) {
            return c("Init error", t3), this.renderer && this.renderer.domElement && this.el.removeChild(this.renderer.domElement), void (this.options.backgroundColor && (console.log("[VANTA] Falling back to backgroundColor"), this.el.style.background = (s2 = this.options.backgroundColor, "number" == typeof s2 ? "#" + ("00000" + s2.toString(16)).slice(-6) : s2)));
          }
          this.initMouse(), this.resize(), this.animationLoop();
          const o2 = window.addEventListener;
          o2("resize", this.resize), window.requestAnimationFrame(this.resize), this.options.mouseControls && (o2("scroll", this.windowMouseMoveWrapper), o2("mousemove", this.windowMouseMoveWrapper)), this.options.touchControls && (o2("touchstart", this.windowTouchWrapper), o2("touchmove", this.windowTouchWrapper)), this.options.gyroControls && o2("deviceorientation", this.windowGyroWrapper);
        }
        setOptions(t2 = {}) {
          Object.assign(this.options, t2), this.triggerMouseMove();
        }
        prepareEl() {
          let t2, e2;
          if ("undefined" != typeof Node && Node.TEXT_NODE) for (t2 = 0; t2 < this.el.childNodes.length; t2++) {
            const e3 = this.el.childNodes[t2];
            if (e3.nodeType === Node.TEXT_NODE) {
              const t3 = document.createElement("span");
              t3.textContent = e3.textContent, e3.parentElement.insertBefore(t3, e3), e3.remove();
            }
          }
          for (t2 = 0; t2 < this.el.children.length; t2++) e2 = this.el.children[t2], "static" === getComputedStyle(e2).position && (e2.style.position = "relative"), "auto" === getComputedStyle(e2).zIndex && (e2.style.zIndex = 1);
          "static" === getComputedStyle(this.el).position && (this.el.style.position = "relative");
        }
        applyCanvasStyles(t2, e2 = {}) {
          Object.assign(t2.style, { position: "absolute", zIndex: 0, top: 0, left: 0, background: "" }), Object.assign(t2.style, e2), t2.classList.add("vanta-canvas");
        }
        initThree() {
          a.WebGLRenderer ? (this.renderer = new a.WebGLRenderer({ alpha: true, antialias: true }), this.el.appendChild(this.renderer.domElement), this.applyCanvasStyles(this.renderer.domElement), isNaN(this.options.backgroundAlpha) && (this.options.backgroundAlpha = 1), this.scene = new a.Scene()) : console.warn("[VANTA] No THREE defined on window");
        }
        getCanvasElement() {
          return this.renderer ? this.renderer.domElement : this.p5renderer ? this.p5renderer.canvas : void 0;
        }
        getCanvasRect() {
          const t2 = this.getCanvasElement();
          return !!t2 && t2.getBoundingClientRect();
        }
        windowMouseMoveWrapper(t2) {
          const e2 = this.getCanvasRect();
          if (!e2) return false;
          const i2 = t2.clientX - e2.left, s2 = t2.clientY - e2.top;
          i2 >= 0 && s2 >= 0 && i2 <= e2.width && s2 <= e2.height && (this.mouseX = i2, this.mouseY = s2, this.options.mouseEase || this.triggerMouseMove(i2, s2));
        }
        windowTouchWrapper(t2) {
          const e2 = this.getCanvasRect();
          if (!e2) return false;
          if (1 === t2.touches.length) {
            const i2 = t2.touches[0].clientX - e2.left, s2 = t2.touches[0].clientY - e2.top;
            i2 >= 0 && s2 >= 0 && i2 <= e2.width && s2 <= e2.height && (this.mouseX = i2, this.mouseY = s2, this.options.mouseEase || this.triggerMouseMove(i2, s2));
          }
        }
        windowGyroWrapper(t2) {
          const e2 = this.getCanvasRect();
          if (!e2) return false;
          const i2 = Math.round(2 * t2.alpha) - e2.left, s2 = Math.round(2 * t2.beta) - e2.top;
          i2 >= 0 && s2 >= 0 && i2 <= e2.width && s2 <= e2.height && (this.mouseX = i2, this.mouseY = s2, this.options.mouseEase || this.triggerMouseMove(i2, s2));
        }
        triggerMouseMove(t2, e2) {
          void 0 === t2 && void 0 === e2 && (this.options.mouseEase ? (t2 = this.mouseEaseX, e2 = this.mouseEaseY) : (t2 = this.mouseX, e2 = this.mouseY)), this.uniforms && (this.uniforms.iMouse.value.x = t2 / this.scale, this.uniforms.iMouse.value.y = e2 / this.scale);
          const i2 = t2 / this.width, s2 = e2 / this.height;
          "function" == typeof this.onMouseMove && this.onMouseMove(i2, s2);
        }
        setSize() {
          this.scale || (this.scale = 1), i() && this.options.scaleMobile ? this.scale = this.options.scaleMobile : this.options.scale && (this.scale = this.options.scale), this.width = Math.max(this.el.offsetWidth, this.options.minWidth), this.height = Math.max(this.el.offsetHeight, this.options.minHeight);
        }
        initMouse() {
          (!this.mouseX && !this.mouseY || this.mouseX === this.options.minWidth / 2 && this.mouseY === this.options.minHeight / 2) && (this.mouseX = this.width / 2, this.mouseY = this.height / 2, this.triggerMouseMove(this.mouseX, this.mouseY));
        }
        resize() {
          this.setSize(), this.camera && (this.camera.aspect = this.width / this.height, "function" == typeof this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix()), this.renderer && (this.renderer.setSize(this.width, this.height), this.renderer.setPixelRatio(window.devicePixelRatio / this.scale)), "function" == typeof this.onResize && this.onResize();
        }
        isOnScreen() {
          const t2 = this.el.offsetHeight, e2 = this.el.getBoundingClientRect(), i2 = window.pageYOffset || (document.documentElement || document.body.parentNode || document.body).scrollTop, s2 = e2.top + i2;
          return s2 - window.innerHeight <= i2 && i2 <= s2 + t2;
        }
        animationLoop() {
          this.t || (this.t = 0), this.t2 || (this.t2 = 0);
          const t2 = performance.now();
          if (this.prevNow) {
            let e2 = (t2 - this.prevNow) / (1e3 / 60);
            e2 = Math.max(0.2, Math.min(e2, 5)), this.t += e2, this.t2 += (this.options.speed || 1) * e2, this.uniforms && (this.uniforms.iTime.value = 0.016667 * this.t2);
          }
          return this.prevNow = t2, this.options.mouseEase && (this.mouseEaseX = this.mouseEaseX || this.mouseX || 0, this.mouseEaseY = this.mouseEaseY || this.mouseY || 0, Math.abs(this.mouseEaseX - this.mouseX) + Math.abs(this.mouseEaseY - this.mouseY) > 0.1 && (this.mouseEaseX += 0.05 * (this.mouseX - this.mouseEaseX), this.mouseEaseY += 0.05 * (this.mouseY - this.mouseEaseY), this.triggerMouseMove(this.mouseEaseX, this.mouseEaseY))), (this.isOnScreen() || this.options.forceAnimate) && ("function" == typeof this.onUpdate && this.onUpdate(), this.scene && this.camera && (this.renderer.render(this.scene, this.camera), this.renderer.setClearColor(this.options.backgroundColor, this.options.backgroundAlpha)), this.fps && this.fps.update && this.fps.update(), "function" == typeof this.afterRender && this.afterRender()), this.req = window.requestAnimationFrame(this.animationLoop);
        }
        restart() {
          if (this.scene) for (; this.scene.children.length; ) this.scene.remove(this.scene.children[0]);
          "function" == typeof this.onRestart && this.onRestart(), this.init();
        }
        init() {
          "function" == typeof this.onInit && this.onInit();
        }
        destroy() {
          "function" == typeof this.onDestroy && this.onDestroy();
          const t2 = window.removeEventListener;
          t2("touchstart", this.windowTouchWrapper), t2("touchmove", this.windowTouchWrapper), t2("scroll", this.windowMouseMoveWrapper), t2("mousemove", this.windowMouseMoveWrapper), t2("deviceorientation", this.windowGyroWrapper), t2("resize", this.resize), window.cancelAnimationFrame(this.req);
          const e2 = this.scene;
          e2 && e2.children && r(e2), this.renderer && (this.renderer.domElement && this.el.removeChild(this.renderer.domElement), this.renderer = null, this.scene = null), l.current === this && (l.current = null);
        }
      };
      const p = l.VantaBase;
      let d = "object" == typeof window && window.THREE;
      class u extends p {
        static initClass() {
          this.prototype.defaultOptions = { backgroundColor: 2106408, color: 8978176 }, this.prototype.colors = [16720469, 16716185, 16737996, 8978176, 7851025, 16776960, 16742195, 1179647, 1149149, 16768290, 2250188, 7975100, 5468283];
        }
        constructor(t2) {
          d = t2.THREE || d, super(t2);
        }
        material(t2) {
          return new d.MeshLambertMaterial({ color: t2 });
        }
        genRing(t2, e2, i2, r2, h2, a2, l2) {
          null == r2 && (r2 = 0), null == h2 && (h2 = 1.4 * Math.PI), null == a2 && (a2 = 0), null == l2 && (l2 = 1), this.rings || (this.rings = []), e2 < 1 && (e2 = 1);
          const c2 = { depth: 0.4, bevelEnabled: false, steps: 1, curveSegments: ~~(64 * h2 / 6.14) }, p2 = new d.Shape();
          p2.absarc(0, 0, e2 + i2, 0, h2, false), p2.lineTo(e2 * Math.cos(h2), e2 * Math.sin(h2)), p2.absarc(0, 0, e2, h2, 0, true);
          const u2 = new d.ExtrudeGeometry(p2, c2), m2 = this.material(t2);
          (0 === n(0, 1) || e2 > 60) && (m2.transparent = true, m2.opacity = Math.max(50 / e2 + o(-0.3, 0.3), 0.1));
          const f = new d.Mesh(u2, m2);
          if (f.rotation.x = Math.PI / 2, f.rotation.z = r2, f.position.y = a2, f.speed = 1e-3 * l2, f.receiveShadow = true, f.castShadow = true, this.rings.push(f), this.cont.add(f), e2 < 20 && h2 < 1.3 * Math.PI && n(0, 2)) try {
            this.genRing(s(this.colors), e2 + o(-1, 3), i2 + o(-2, 0), r2 + h2, h2 + o(-0.5, 0.5), a2 + o(-3, 1), l2);
          } catch (t3) {
          }
          return f;
        }
        onInit() {
          let t2;
          const { material: e2 } = this;
          this.cont = new d.Group(), this.cont.position.set(30, 0, 0), this.cont.rotation.x = 0.06667, this.cont.rotation.z = 0.16667, this.scene.add(this.cont);
          let r2 = i() ? 30 : 60;
          for (let e3 = 0; e3 < r2; e3++) {
            let e4;
            n(0, 3) ? (e4 = o(2, 4) + o(1, 30) * o(1, 2) * o(1, 2) * o(1, 2), i() && (e4 *= 0.5), t2 = o(0, 3.5) + o(0, 3.5) - n(0, e4 / 4) - e4 / 50) : (e4 = o(1, 3) * o(2, 4), t2 = o(1, 2) * o(1, 2) * o(1.1, 1.5));
            const r3 = 0.05 * Math.pow(2, n(0, 4));
            t2 < r3 && (t2 = r3), this.genRing(s(this.colors), e4, t2, o(0, 1e3), o(1, 6), o(0, 50 / (e4 + 1) + 5) + 5 / t2 / (e4 + 0.5), 0.25 * Math.max(-o(0.5, 2), o(1, 50 - e4 / 2) - e4 / 2));
          }
          this.camera = new d.PerspectiveCamera(25, this.width / this.height, 10, 1e4), this.camera.position.set(0, 150, 200), this.scene.add(this.camera);
          const h2 = new d.AmbientLight(16777215, 0.5);
          return this.scene.add(h2), this.pointLight = new d.PointLight(16777215, 0.5), this.pointLight.position.set(0, 150, 200), this.scene.add(this.pointLight), this.spot = new d.SpotLight(16777215, 1), this.spot.position.set(-15, 50, 100), this.spot.penumbra = 1, this.spot.angle = 0.5, this.spot.decay = 1, this.spot.distance = 300, this.spot.target = this.cont, this.scene.add(this.spot);
        }
        onUpdate() {
          let t2;
          null != this.helper && this.helper.update(), null != this.controls && this.controls.update();
          const e2 = this.camera;
          Math.abs(e2.tx - e2.position.x) > 0.01 && (t2 = e2.tx - e2.position.x, e2.position.x += 0.02 * t2), Math.abs(e2.ty - e2.position.y) > 0.01 && (t2 = e2.ty - e2.position.y, e2.position.y += 0.02 * t2), e2.lookAt(new d.Vector3(0, 25, 7)), e2.near = Math.max(0.5 * e2.position.z - 20, 1), e2.updateProjectionMatrix();
          for (let t3 of Array.from(null != this.rings ? this.rings : [])) t3.rotation.z += t3.speed;
          const i2 = 1e-3 * this.t;
          return this.cont.rotation.x += 1e-4 * Math.sin(i2), this.cont.rotation.z += 7e-5 * Math.cos(i2);
        }
        onMouseMove(t2, e2) {
          const i2 = this.camera;
          return i2.oy || (i2.oy = i2.position.y, i2.ox = i2.position.x), i2.tx = i2.ox + 50 * (t2 - 0.5), i2.ty = i2.oy - 50 * e2;
        }
      }
      u.initClass();
      const m = l.register("RINGS", u);
      return e;
    })());
  }
});
export default require_vanta_rings_min();
//# sourceMappingURL=vanta_dist_vanta__rings__min.js.map
